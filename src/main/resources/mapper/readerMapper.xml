<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ts.library.dao.IReaderDao">

    <resultMap id="readerResultMap" type="com.ts.library.entity.Reader">
        <id column="user_id" property="userId" jdbcType="SMALLINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="registration_time" property="registrationTime" jdbcType="DATE"/>
        <result column="last_updated_time" property="lastUpdatedTime" jdbcType="DATE"/>
        <result column="whether_administrator" property="whetherAdministrator" jdbcType="TINYINT"/>
        <result column="validity" property="validity" jdbcType="TINYINT"/>
    </resultMap>

    <!--判断是否有相同的用户,
        用于登录和注册检测-->
    <select id="checkReader" resultMap="readerResultMap" parameterType="com.ts.library.entity.Reader">
        select
        whether_administrator
        from library.reader
        <where>
            <if test="username != null and !&quot;&quot;.equals(username.trim())">
                and username = #{username}
            </if>
            <if test="password != null and !&quot;&quot;.equals(password.trim())">
                and password = #{password}
            </if>
            and validity = 1
        </where>
    </select>

    <!--新增Reader,用于注册Reader-->
    <insert id="addReader" parameterType="com.ts.library.entity.Reader" useGeneratedKeys="true" keyProperty="userId">
        insert into library.reader (
            username,
            password,
            nickname,
            registration_time,
            last_updated_time,
            whether_administrator,
            validity
            )
            value (
            #{username},
            #{password},
            #{nickname},
            curdate(),
            curdate(),
            0,
            1
            )
    </insert>

    <!--修改Reader,用于Reader修改密码和管理员修改用户信息-->
    <update id="editReader" parameterType="com.ts.library.entity.Reader">
        update library.reader
        <set>
            <if test="username != null and !&quot;&quot;.equals(username.trim())">
                username = #{username},
            </if>
            <if test="password != null and !&quot;&quot;.equals(password.trim())">
                password = #{password},
            </if>
            <if test="nickname != null and !&quot;&quot;.equals(nickname.trim())">
                nickname = #{nickname},
            </if>
            last_updated_time = curdate()
        </set>
        <where>
            user_id = #{userId}
        </where>
    </update>

    <!--根据传入的userId删除用户,用于管理员删除用户-->
    <update id="delReader" parameterType="SHORT">
        update library.reader
        <set>
            validity = 0
        </set>
        <where>
            user_id = #{userId}
        </where>
    </update>

    <!--查询Reader,用于查询所有数据和模糊查询-->
    <select id="queryReader" resultMap="readerResultMap" parameterType="com.ts.library.entity.Reader">
        select
        user_id,
        username,
        password,
        nickname,
        registration_time,
        last_updated_time,
        whether_administrator,
        validity
        from library.reader
        <where>
            <if test="username != null and !&quot;&quot;.equals(username.trim())">
                and upper(username) regexp #{username}
            </if>
            <if test="password != null and !&quot;&quot;.equals(password.trim())">
                and upper(password) regexp #{password}
            </if>
            <if test="nickname != null and !&quot;&quot;.equals(nickname.trim())">
                and upper(nickname) regexp #{nickname}
            </if>
            and validity = #{validity}
        </where>
    </select>

</mapper>